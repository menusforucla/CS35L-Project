// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                      Int             @id @default(autoincrement())
  name                    String          @unique
  isResidentialRestaurant Boolean         @default(true)
  menuSections            MenuSection[]
  reviews                 Review[]
  currentActivityLevel    Int
  activityLevels          ActivityLevel[]
  hours                   Hours[]

  updatedAt DateTime @updatedAt

  @@index([name])
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Hours {
  id             Int         @id @default(autoincrement())
  dayOfWeek      DayOfWeek
  breakfastOpen  String?
  breakfastClose String?
  lunchOpen      String?
  lunchClose     String?
  dinnerOpen     String?
  dinnerClose    String?
  Restaurant     Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId   Int?

  @@index([restaurantId])
}

model MenuSection {
  id        Int        @id @default(autoincrement())
  name      String
  menuItems MenuItem[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  updatedAt DateTime @updatedAt

  @@unique([name, restaurantId], name: "menuSectionIdentifier")
  @@index([restaurantId])
}

model MenuItem {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String
  ingredients        String
  allergens          Allergen[]
  carbonFootprint    CarbonFootprint
  dietaryPreferences DietaryPreference[]

  nutritionFacts NutritionFacts?
  menuSection    MenuSection     @relation(fields: [menuSectionId], references: [id])
  menuSectionId  Int
  reviews        Review[]
  images         Image[]

  updatedAt DateTime @updatedAt

  @@unique([name, menuSectionId], name: "menuItemIdentifier")
  @@index([menuSectionId])
}

model NutritionFacts {
  id                Int    @id @default(autoincrement())
  servingSize       String
  calories          String
  totalFat          String
  saturatedFat      String
  transFat          String
  cholesterol       String
  sodium            String
  totalCarbohydrate String
  dietaryFiber      String
  sugars            String
  protein           String
  calcium           String
  iron              String
  potassium         String
  vitaminD          String

  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId Int      @unique
}

enum FoodAllergen {
  PEANUTS
  TREE_NUTS
  WHEAT
  GLUTEN
  SOYBEANS
  SESAME
  DAIRY
  EGGS
  CRUSTACEAN_SHELLFISH
  FISH
}

model Allergen {
  id   Int          @id @default(autoincrement())
  name FoodAllergen @unique

  menuItems MenuItem[]

  @@index([name])
}

enum CarbonFootprint {
  LOW
  HIGH
}

enum DietaryPreferenceEnum {
  VEGETARIAN
  VEGAN
  HALAL
  PREPARED_WITH_ALCOHOL
}

model DietaryPreference {
  id   Int                   @id @default(autoincrement())
  name DietaryPreferenceEnum @unique

  menuItems MenuItem[]

  @@index([name])
}

model Review {
  id     String  @id @default(cuid())
  rating Int
  review String?
  images Image[]

  menuItems    MenuItem[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([restaurantId])
}

model Image {
  id   Int    @id @default(autoincrement())
  url  String
  type String

  review     Review?   @relation(fields: [reviewId], references: [id])
  reviewId   String?
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId Int?

  createdAt DateTime @default(now())

  @@index([reviewId])
  @@index([menuItemId])
}

model ActivityLevel {
  id            Int @id @default(autoincrement())
  activityLevel Int

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  time DateTime @default(now())

  @@index([restaurantId])
}
