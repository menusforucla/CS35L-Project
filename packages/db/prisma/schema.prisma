// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                      Int                @id @default(autoincrement())
  name                    String
  menuSections            MenuSection[]
  menuItems               MenuItem[]
  isResedentialRestaurant Boolean            @default(true)
  reviews                 Review[]
  activityLevels       ActivityLevel[]

  updatedAt DateTime @updatedAt
}

model MenuSection {
  id        Int        @id @default(autoincrement())
  name      String
  menuItems MenuItem[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  updatedAt DateTime @updatedAt

  @@index([restaurantId])
}

model MenuItem {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String
  ingredients        Ingredient[]
  allergens          Allergen[]
  carbonFootprint    CarbonFootprint
  dietaryPreferences DietaryPreference[]

  nutritionFacts   NutritionFacts @relation(fields: [nutritionFactsId], references: [id])
  nutritionFactsId Int            @unique
  restaurant       Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId     Int
  menuSection      MenuSection    @relation(fields: [menuSectionId], references: [id])
  menuSectionId    Int
  reviews          Review[]
  images           Image[]

  updatedAt DateTime @updatedAt

  @@index([menuSectionId])
  @@index([restaurantId])
  @@index([nutritionFactsId])
}

model NutritionFacts {
  id                Int       @id @default(autoincrement())
  servingSize       String
  calories          Float
  totalFat          Float
  saturatedFat      Float
  transFat          Float
  cholesterol       Float
  sodium            Float
  totalCarbohydrate Float
  dietaryFiber      Float
  sugars            Float
  protein           Float
  calcium           Float
  iron              Float
  potassium         Float
  vitaminD          Float
  MenuItem          MenuItem?
}

model Ingredient {
  id   Int    @id @default(autoincrement())
  name String

  menuItems MenuItem[]
}

enum FoodAllergen {
  PEANUTS
  TREE_NUTS
  WHEAT
  GLUTEN
  SOYBEANS
  SESAME
  DAIRY
  EGGS
  CRUSTACEAN_SHELLFISH
  FISH
}

model Allergen {
  id   Int          @id @default(autoincrement())
  name FoodAllergen

  menuItems MenuItem[]
}

enum CarbonFootprint {
  LOW
  HIGH
}

enum DietaryPreferenceEnum {
  VEGETARIAN
  VEGAN
  HALAL
  PREPARED_WITH_ALCOHOL
}

model DietaryPreference {
  id   Int                   @id @default(autoincrement())
  name DietaryPreferenceEnum

  menuItems MenuItem[]
}

model Review {
  id     String  @id @default(cuid())
  rating Int
  review String?
  images Image[]

  menuItems    MenuItem[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  imageId Int?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([restaurantId])
}

model Image {
  id   Int    @id @default(autoincrement())
  url  String
  type String

  review     Review?   @relation(fields: [reviewId], references: [id])
  reviewId   String?
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId Int?

  createdAt DateTime @default(now())

  @@index([reviewId])
  @@index([menuItemId])
}

model ActivityLevel {
  id           Int @id @default(autoincrement())
  activityLevel Int

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  time DateTime @default(now())

  @@index([restaurantId])
}
